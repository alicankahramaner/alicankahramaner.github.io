{"version":3,"sources":["serviceWorker.ts","Reducers/Profile/index.ts","Helper/Config.ts","Pages/BasePage.tsx","Reducers/System/index.ts","Helper/utils.ts","Models/System/index.ts","Reducers/index.ts","Store.tsx","Components/BaseComponent.tsx","Components/Section/Section.tsx","Actions/Profile/index.ts","Components/Picture/Picture.tsx","Pages/Home.tsx","Components/SkillList/SkillList.tsx","Pages/About.tsx","Pages/404.tsx","Routes/index.ts","Components/Header/NLink.tsx","Components/Header/Header.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ProfileActionTypes","ConfigFile","require","Config","_config","AppName","AppTitle","this","BasePage","UpdateAppTitle","props","React","ProfileInitiliazeReducer","Github","id","avatar_url","blog","company","name","url","Profile","Name","LastName","Title","Company","SystemActionTypes","SystemInitiliazeReducer","ComponentId","lenght","number","i","Math","floor","random","RandomNumberGenerator","DirectionEnum","combineReducers","state","action","type","GetGithubProfile","data","System","UpdateTitle","currentId","parseInt","reduxRouterMiddleware","routerMiddleware","createBrowserHistory","middleware","thunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","Reducers","applyMiddleware","BaseComponent","styleProperties","getState","toString","dispatch","Section","suffix","classList","className","concat","contentDirection","push","noTransparentContent","join","style","title","children","bgImage","backgroundImage","GetGithubProfileData","a","Picture","bordered","align","src","alt","size","width","height","Home","Middle","connect","ProfileData","bindActionCreators","ProfileAction","SkillList","map","skill","index","key","About","skils","applications","Routes","component","isErrorPage","pageTitle","path","activeRoute","find","r","replace","includes","GetActiveRouteTitle","pathname","document","NLink","onClick","event","e","currentTarget","preventDefault","Header","pageNavLinks","PagesRoutes","forEach","activeClassName","exact","to","App","Fragment","filter","routes","router","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed69bf68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ProfileDto } from '../../Models/Profile/index';\nimport { iReducer } from '../../Models/System/index';\n\nconst ProfileInitiliazeReducer: ProfileDto = {\n    Github: {\n        id: 0,\n        avatar_url: '',\n        blog: '',\n        company: '',\n        location: '',\n        name: '',\n        url: ''\n    },\n    Profile: {\n        Name: '',\n        LastName: '',\n        Title: '',\n        Company: ''\n    }\n}\n\nexport enum ProfileActionTypes {\n    GetGithubProfile = 'Profile.GetGithub'\n}\n\nexport const Profile: iReducer<ProfileDto> = (state = ProfileInitiliazeReducer, action) => {\n    switch (action.type) {\n        case ProfileActionTypes.GetGithubProfile:\n            return { ...state, Github: action.data }\n        default:\n            return state;\n    }\n}\n","import { ConfigDto } from \"../Models/System\";\n\nconst ConfigFile = require('../Config.json');\n\nclass ConfigHelper {\n    private _config: ConfigDto = {\n        AppName: '',\n        AppTitle: ''\n    };\n\n    constructor() {\n        this._config = ConfigFile;\n    }\n\n    public GetConfig() {\n        return this._config;\n    }\n\n    get AppTitle() {\n        return this._config.AppTitle;\n    }\n\n    get AppName() {\n        return this._config.AppName;\n    }\n}\n\nexport const Config = new ConfigHelper();","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { UpdateAppTitle } from '../Routes';\n\ninterface BasePageProps<T> extends RouteComponentProps { }\n\ninterface BasePageState<T> { }\n\nexport class BasePage<P, S> extends React.Component<BasePageProps<P>, BasePageState<S>> {\n    componentDidMount() {\n        UpdateAppTitle(this.props.location);\n    }\n}","import { SystemDto, iReducer } from '../../Models/System/index';\nimport { RandomNumberGenerator } from '../../Helper/utils';\n\nconst SystemInitiliazeReducer: SystemDto = {\n    Title: 'Home',\n    ComponentId: RandomNumberGenerator()\n}\n\nexport enum SystemActionTypes {\n    UpdateTitle = 'System.UpdateTitle',\n    ComponentId = 'system.ComponentId'\n}\n\nexport const System: iReducer<SystemDto> = (state = SystemInitiliazeReducer, action) => {\n    switch (action.type) {\n        case SystemActionTypes.UpdateTitle:\n            return { ...state, Title: action.data };\n        case SystemActionTypes.ComponentId:\n            let currentId = parseInt(state.ComponentId);\n            currentId++;\n\n            return { ...state, ComponentId: currentId };\n        default:\n            return state\n    }\n}\n","export const isNullOrUndefined = (obj: any) => obj === null || obj === undefined;\n\nexport const RandomNumberGenerator = (lenght: number = 5) => {\n    let number = '';\n\n    for (var i = 0; i < lenght; i++) {\n        number += Math.floor(Math.random() * 10);\n    }\n\n    return number;\n}","import { RouteProps } from \"react-router-dom\";\n\nexport interface ActionType {\n    type: string,\n    data: any;\n    reducerName?: string;\n}\n\nexport interface ConfigDto {\n    AppName: string;\n    AppTitle: string;\n}\n\nexport interface iReducerType<State> { };\n\nexport declare type iReducer<State> = (state: State, action: ActionType) => iReducerType<State>;\n\nexport interface iRoute extends RouteProps {\n    name: string;\n    title: string;\n    isErrorPage?: boolean;\n    url: string;\n}\n\nexport interface SystemDto {\n    Title: string;\n    ComponentId: string;\n}\n\nexport enum DirectionEnum {\n    Top = 'top',\n    TopLeft = 'topLeft',\n    TopRight = 'topRight',\n\n    Bottom = 'bottom',\n    BottomLeft = 'bottomLeft',\n    BottomRight = 'bottomRight',\n\n    Right = 'right',\n    Left = 'left',\n\n    Middle = 'middle',\n    MiddleLeft = 'middleLeft',\n    MiddleRight = 'middleRight',\n}\n\nexport interface SizeDto {\n    width: number;\n    height: number;\n}","import { combineReducers } from 'redux';\n\nimport { Profile } from './Profile/index';\nimport { System } from './System/index';\n\nexport default combineReducers({\n    Profile,\n    System\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport { createBrowserHistory } from 'history';\n\nimport Reducers from './Reducers/index'\n\nconst reduxRouterMiddleware = routerMiddleware(createBrowserHistory());\nconst middleware = [\n    thunk,\n    reduxRouterMiddleware\n];\n\nconst composeEnhancers =\n    typeof window === 'object' &&\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n        (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n        }) : compose;\n\n\nexport const store = createStore(\n    Reducers,\n    composeEnhancers(applyMiddleware(...middleware)),\n\n);","import * as React from 'react';\n\nimport { store } from '../Store';\nimport { SystemActionTypes } from '../Reducers/System';\n\nexport interface BaseComponentProps {\n    className?: string[];\n}\n\nexport class BaseComponent<P, S> extends React.Component<P, S>{\n    public name: string = '';\n    public styleProperties: React.CSSProperties = {};\n\n    get id() {\n        let currentId: string | number = parseInt((store.getState().System as any).ComponentId);\n        currentId++;\n        currentId = currentId.toString();\n\n        store.dispatch({ type: SystemActionTypes.ComponentId, data: currentId });\n\n        return currentId;\n    }\n}","import * as React from 'react';\nimport { BaseComponent, BaseComponentProps } from './../BaseComponent';\nimport { DirectionEnum } from '../../Models/System';\n\ninterface SectionProps extends BaseComponentProps {\n    title?: string;\n    bgColor?: string;\n    bgImage?: string;\n    noTransparentContent?: boolean;\n    contentDirection?: DirectionEnum;\n}\n\n\nexport class Section extends BaseComponent<SectionProps, any> {\n\n    constructor(props: SectionProps) {\n        super(props);\n\n        this.name = 'section';\n    }\n\n    private className(suffix?: string) {\n\n        if (suffix) {\n            return `${this.name}-${suffix}`;\n        }\n\n        let classList: string[] = [this.name];\n\n        if (this.props.className) {\n            classList = classList.concat(this.props.className);\n        }\n\n        if (this.props.contentDirection) {\n            classList.push(this.props.contentDirection);\n        }\n\n        if (this.props.noTransparentContent) {\n            classList.push('noTransparentContent');\n        }\n\n        return classList.join(' ');\n    }\n\n    get style() {\n\n        this.styleProperties = {};\n\n        if (this.props.bgImage) {\n            this.styleProperties.backgroundImage = `url(${this.props.bgImage})`;\n        }\n\n        return this.styleProperties;\n    }\n\n    render() {\n        return (\n            <section id={this.id} className={this.className()} style={this.style}>\n                {\n                    this.props.title ?\n                        <h3>{this.props.title}</h3>\n                        : null\n                }\n                <div className={this.className('content')}>\n                    {this.props.children}\n                </div>\n            </section>\n        );\n    }\n}","import { Dispatch } from \"react\";\nimport { ActionType } from '../../Models/System/index';\nimport { ProfileActionTypes } from \"../../Reducers/Profile\";\n\nexport const GetGithubProfileData = () => {\n    return async (dispatch: Dispatch<ActionType>) => {\n        dispatch({\n            type: ProfileActionTypes.GetGithubProfile,\n            data: {\n                location: 'ist',\n                name: 'alican',\n            }\n        });\n\n        return true;\n    }\n}\n\nexport interface ProfileActionDeclarations {\n    GetGithubProfileData(): true | false;\n}","import * as React from 'react';\nimport { BaseComponentProps } from './../BaseComponent';\nimport { SizeDto, DirectionEnum } from '../../Models/System';\n\ninterface PictureProps extends BaseComponentProps {\n    src: string;\n    alt?: string;\n    title?: string;\n    size: SizeDto;\n    bordered?: boolean;\n    align?: DirectionEnum.Left | DirectionEnum.Right | DirectionEnum.Middle\n}\n\nexport const Picture: React.FunctionComponent<PictureProps> = (props) => {\n\n    const className = () => {\n        let classList: string[] = ['picture'];\n\n        if (props.className) {\n            classList = classList.concat(props.className);\n        }\n\n        if (props.bordered) {\n            classList.push('bordered');\n        }\n\n        if (props.align) {\n            classList.push(props.align);\n        }\n\n        return classList.join(' ');\n    }\n\n    const size = () => {\n        if (!props.size) {\n            return {};\n        }\n\n        return {\n            width: `${props.size.width}px`,\n            height: `${props.size.height}px`\n        } as React.CSSProperties\n    }\n\n    return (\n        <figure title={props.title} className={className()}>\n            <img src={props.src} alt={props.alt} style={size()} />\n        </figure>\n    )\n}","import * as React from 'react';\nimport { BasePage } from './BasePage';\nimport { Section } from '../Components/Section/Section';\nimport { connect } from 'react-redux';\nimport * as ProfileAction from '../Actions/Profile/index';\nimport { ProfileDto } from '../Models/Profile';\nimport { bindActionCreators } from 'redux';\nimport { DirectionEnum } from '../Models/System';\nimport { Picture } from '../Components/Picture/Picture';\n\ninterface HomeProps extends ProfileAction.ProfileActionDeclarations {\n    ProfileData: ProfileDto;\n}\n\nexport class Home extends BasePage<HomeProps, any> {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Section noTransparentContent={true} contentDirection={DirectionEnum.Middle} className={['homepage','bgi-room']}>\n                    <Picture bordered align={DirectionEnum.Middle} size={{width:150,height:150}} src=\"https://avatars0.githubusercontent.com/u/12401497?s=460&u=d717dc1b7f7466ce16e94de40a90a2c06f3db3d8&v=4\" />\n                    <h1>Alican Kahramaner</h1>\n                    <h4>Front-End Developer</h4>\n                </Section>\n            </React.Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any, props: HomeProps) => {\n    return {\n        ...props,\n        ProfileData: state.Profile.Github\n    }\n}\nconst mapDispatchToProps = (dispatch: any, state: any) => {\n    return bindActionCreators({\n        ...ProfileAction\n    }, dispatch)\n}\n\nconnect(mapStateToProps, mapDispatchToProps)(Home);","import * as React from 'react';\nimport { BaseComponent, BaseComponentProps } from '../BaseComponent';\n\n\ninterface SkillListProps extends BaseComponentProps {\n    data: string[];\n    title: string;\n}\n\nexport class SkillList extends BaseComponent<SkillListProps, any> {\n    constructor(props: SkillListProps) {\n        super(props);\n\n        this.name = 'skillList';\n    }\n\n    private className(suffix?: string) {\n        if (suffix) {\n            return `${this.name}-${suffix}`;\n        }\n\n        let classList: string[] = [this.name];\n\n        if (this.props.className) {\n            classList = classList.concat(this.props.className);\n        }\n\n        return classList.join(' ');\n    }\n\n    render() {\n        return (\n            <div className={this.className()}>\n                <span>{this.props.title}</span>\n                <ul>\n                    {\n                        this.props.data.map((skill: string, index: number) => {\n                            return (\n                                <li key={skill} className={this.className('item')}>{skill}</li>\n                            );\n                        })\n                    }\n                </ul>\n            </div>\n        );\n    }\n}","import * as React from 'react';\nimport { BasePage } from './BasePage';\nimport { Section } from '../Components/Section/Section';\nimport { connect } from 'react-redux';\nimport * as ProfileAction from '../Actions/Profile/index';\nimport { bindActionCreators } from 'redux';\nimport { DirectionEnum } from '../Models/System';\nimport { SkillList } from '../Components/SkillList/SkillList';\n\nconst data = require('../Resources/data.json');\n\ninterface AboutProps extends ProfileAction.ProfileActionDeclarations {\n}\n\nexport class About extends BasePage<AboutProps, any> {\n\n    render() {\n        return (\n            <Section className={['bgi-workspace']} contentDirection={DirectionEnum.Middle}>\n                <h1>About</h1>\n                <p>Merhabalar,</p>\n                <p>Ben <strong>Alican KAHRAMANER</strong> Front-End Developer olarak çalışmaktayım.</p>\n                <p>Lise ve Üniversite de yazılım alanında okumuş ama daha öncesinden beri bilgisayar donanım ve yazılıma olan ilgim ile işimi sevmiş oldum.</p>\n                <p>Front-End teknolokilerindeki gelişmeler ve yenilikleri yakından takip çalıştığım şirket ve çalışmış olduğum şirketler deki projelerin ve kendi projelerimin ihtiyaçları doğrultusunda kullanmaya çalışıyorum.</p>\n                <p>Bir Apple hayranı ve aynı zamanda OpenSource destekçisi olarak Front-End developer olarak hayatıma devam etmekteyim.</p>\n\n                <SkillList title=\"Teknolojiler ve Kavramlar\" data={data.skils} />\n                <SkillList title=\"Kullandığım Uygulamalar\" data={data.applications} />\n            </Section>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any, props: AboutProps) => {\n    return {\n        ...props,\n        ProfileData: state.Profile.Github\n    }\n}\nconst mapDispatchToProps = (dispatch: any, state: any) => {\n    return bindActionCreators({\n        ...ProfileAction\n    }, dispatch)\n}\n\nconnect(mapStateToProps, mapDispatchToProps)(About);","import * as React from 'react';\nimport { Section } from '../Components/Section/Section';\nimport { DirectionEnum } from '../Models/System';\nimport { BasePage } from './BasePage';\n\nexport class Error404 extends BasePage<any, any> {\n\n    render() {\n        return (\n            <React.Fragment>\n                <Section noTransparentContent={true} contentDirection={DirectionEnum.Middle} className={['page404', 'bgi-light']}>\n                    <h3>Aradığınız sayfayı silmiş veya hala geliştiriyor olabilir. :)</h3>\n                    <h5>Tekrar Başlamak için [index.html]</h5>\n                </Section>\n            </React.Fragment>\n        );\n    }\n\n}","import { iRoute } from '../Models/System';\nimport * as  H from 'history';\nimport { Config } from '../Helper/Config';\n\nimport { Home } from '../Pages/Home';\nimport { About } from '../Pages/About';\nimport { Error404 } from '../Pages/404';\n\nexport const Routes: iRoute[] = [\n    {\n        name: 'index.html',\n        url: '/',\n        title: 'Index.',\n        component: Home\n    },\n    {\n        name: 'hakkimda.html',\n        url: '/About',\n        title: 'About',\n        component: About\n\n    },\n    {\n        name: \"404\",\n        title: \"404\",\n        isErrorPage: true,\n        component: Error404,\n        url: ''\n    }\n\n];\n\nexport const GetActiveRouteTitle = (path: string) => {\n    if (path === '/') {\n        return null;\n    }\n\n    let activeRoute = Routes.find(r => r.url.replace('/', '').includes(path.replace('/', '')));\n\n    return activeRoute ? activeRoute.title : null;\n}\n\nexport const UpdateAppTitle = (location?: H.Location) => {\n    if (!location) {\n        return null;\n    }\n    let pageTitle = GetActiveRouteTitle(location.pathname);\n\n    if (pageTitle !== null) {\n        document.title = `${Config.AppTitle} - ${pageTitle}`;\n    } else {\n        document.title = Config.AppTitle;\n    }\n}","import * as React from 'react';\nimport { NavLinkProps, NavLink } from 'react-router-dom';\n\nexport const NLink: React.FunctionComponent<NavLinkProps> = (props) => {\n\n    const onClickNav = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        if (e.currentTarget.className.includes('active')) {\n            e.preventDefault();\n        }\n    }\n\n    return (\n        <NavLink\n            {...props}\n            onClick={(event) => {\n                onClickNav(event);\n                props.onClick && props.onClick(event);\n            }}\n        >\n            {props.children}\n        </NavLink>\n    );\n}","import * as React from 'react';\nimport { iRoute } from '../../Models/System';\nimport { NLink } from './NLink';\nimport { BaseComponent } from '../BaseComponent';\n\ninterface HeaderProps {\n    PagesRoutes: iRoute[];\n}\n\nexport class Header extends BaseComponent<HeaderProps, any> {\n\n    get pageNavLinks() {\n        const pageNavLinks: React.ReactNode[] = [];\n        this.props.PagesRoutes.forEach((r: iRoute, i: number) => {\n            pageNavLinks.push(<NLink activeClassName=\"active\" exact key={r.name} title={r.name} to={r.url}>{r.name}</NLink>);\n        });\n\n        return pageNavLinks;\n    }\n\n\n    render() {\n\n        return (\n            <div id=\"header\">\n                <nav className=\"navigation\">\n                    {this.pageNavLinks}\n                </nav>\n\n                <nav className=\"profileLinks\">\n\n                </nav>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Routes } from './Routes/index';\nimport { iRoute } from './Models/System';\nimport { Switch, Route } from 'react-router-dom';\nimport { Header } from './Components/Header/Header';\n\nexport class App extends React.Component {\n  get routes() {\n\n    return Routes.map((router: iRoute, index: number) => {\n\n      if (router.isErrorPage) {\n        return (<Route key={router.name} component={router.component} />);\n      }\n\n      return (\n        <Route\n          key={index}\n          exact={index === 0 ? true : false}\n          path={router.url}\n          component={router.component}\n        />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header PagesRoutes={Routes.filter(r => !r.isErrorPage)} />\n        <Switch>\n          {this.routes}\n        </Switch>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './Styles/app.scss';\n\nimport { App } from './App';\nimport { store } from './Store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}